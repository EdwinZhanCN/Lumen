# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import ml_service_pb2 as ml__service__pb2


class InferenceStub(object):
    """---- 服务契约 ----
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Infer = channel.stream_stream(
                '/home_native.v1.Inference/Infer',
                request_serializer=ml__service__pb2.InferRequest.SerializeToString,
                response_deserializer=ml__service__pb2.InferResponse.FromString,
                )
        self.GetCapabilities = channel.unary_unary(
                '/home_native.v1.Inference/GetCapabilities',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ml__service__pb2.Capability.FromString,
                )
        self.StreamCapabilities = channel.unary_stream(
                '/home_native.v1.Inference/StreamCapabilities',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ml__service__pb2.Capability.FromString,
                )
        self.Health = channel.unary_unary(
                '/home_native.v1.Inference/Health',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class InferenceServicer(object):
    """---- 服务契约 ----
    """

    def Infer(self, request_iterator, context):
        """双向流：客户端推片段，服务端回增量/最终结果；顺序保证但互不阻塞
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCapabilities(self, request, context):
        """能力宣告（向后兼容：返回单条能力；多能力请使用 StreamCapabilities）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCapabilities(self, request, context):
        """推荐：服务器流返回全部能力（启动/热更后调用）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """健康探针
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Infer': grpc.stream_stream_rpc_method_handler(
                    servicer.Infer,
                    request_deserializer=ml__service__pb2.InferRequest.FromString,
                    response_serializer=ml__service__pb2.InferResponse.SerializeToString,
            ),
            'GetCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapabilities,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ml__service__pb2.Capability.SerializeToString,
            ),
            'StreamCapabilities': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamCapabilities,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ml__service__pb2.Capability.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'home_native.v1.Inference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Inference(object):
    """---- 服务契约 ----
    """

    @staticmethod
    def Infer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/home_native.v1.Inference/Infer',
            ml__service__pb2.InferRequest.SerializeToString,
            ml__service__pb2.InferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_native.v1.Inference/GetCapabilities',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ml__service__pb2.Capability.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/home_native.v1.Inference/StreamCapabilities',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ml__service__pb2.Capability.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/home_native.v1.Inference/Health',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
