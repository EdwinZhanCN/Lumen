# generated by datamodel-codegen:
#   filename:  config-schema.yaml
#   timestamp: 2025-10-18T04:32:29+00:00

from __future__ import annotations

from enum import Enum
from typing import Literal

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Region(Enum):
    """
    Platform region selection (cn=ModelScope, other=HuggingFace)
    """

    cn = 'cn'
    other = 'other'


class Metadata(BaseModel):
    version: str = Field(
        ...,
        description='Configuration version (semantic versioning)',
        examples=['1.0.0', '2.1.3'],
        pattern='^\\d+\\.\\d+\\.\\d+$',
    )
    region: Region = Field(
        ..., description='Platform region selection (cn=ModelScope, other=HuggingFace)'
    )
    cache_dir: str = Field(
        ...,
        description='Model cache directory path (supports ~ expansion)',
        examples=['~/.lumen/models', '/opt/lumen/models'],
    )


class Mode(Enum):
    """
    Deployment mode
    """

    single = 'single'
    hub = 'hub'


class Service(RootModel[str]):
    root: str = Field(..., pattern='^[a-z][a-z0-9_]*$')


class Deployment(BaseModel):
    mode: Literal['single'] = Field(..., description='Deployment mode')
    service: str = Field(
        ...,
        description='Service name for single mode (required if mode=single)',
        pattern='^[a-z][a-z0-9_]*$',
    )
    services: list[Service] | None = Field(
        None,
        description='Service names for hub mode (required if mode=hub)',
        min_length=1,
    )


class Deployment1(BaseModel):
    mode: Literal['hub'] = Field(..., description='Deployment mode')
    service: str | None = Field(
        None,
        description='Service name for single mode (required if mode=single)',
        pattern='^[a-z][a-z0-9_]*$',
    )
    services: list[Service] = Field(
        ...,
        description='Service names for hub mode (required if mode=hub)',
        min_length=1,
    )


class Mdns(BaseModel):
    enabled: bool | None = Field(False, description='Enable mDNS service discovery')
    service_name: str | None = Field(
        None,
        description='mDNS service name (required if enabled=true)',
        examples=['lumen-clip', 'lumen-hub'],
        pattern='^[a-z][a-z0-9-]*$',
    )


class Server(BaseModel):
    port: int = Field(..., description='gRPC server port', ge=1024, le=65535)
    host: str | None = Field(
        '0.0.0.0',
        description='Server bind address',
        examples=['0.0.0.0', '127.0.0.1', '[::]'],
    )
    mdns: Mdns | None = None


class Import(BaseModel):
    registry_class: str = Field(
        ...,
        description='Full dotted path to service registry class',
        examples=[
            'lumen_clip.service_registry.ClipService',
            'lumen_face.service_registry.FaceService',
        ],
        pattern='^[a-z_][a-z0-9_.]*\\.[A-Z][a-zA-Z0-9]*$',
    )
    add_to_server: str = Field(
        ...,
        description='Full dotted path to gRPC add_to_server function',
        examples=[
            'lumen_clip.proto.ml_service_pb2_grpc.add_InferenceServicer_to_server',
            'lumen_face.proto.ml_service_pb2_grpc.add_FaceServicer_to_server',
        ],
        pattern='^[a-z_][a-z0-9_.]*\\.add_[A-Za-z0-9_]+_to_server$',
    )


class Runtime(Enum):
    """
    Model runtime type
    """

    torch = 'torch'
    onnx = 'onnx'
    rknn = 'rknn'


class ModelConfig(BaseModel):
    model: str = Field(
        ...,
        description='Model repository name',
        examples=['ViT-B-32', 'CN-CLIP-ViT-B-16', 'MobileCLIP-S2'],
    )
    runtime: Runtime = Field(..., description='Model runtime type')
    rknn_device: str | None = Field(
        None,
        description='RKNN device identifier (required if runtime=rknn)',
        examples=['rk3566', 'rk3588'],
        pattern='^rk\\d+$',
    )
    dataset: str | None = Field(
        None,
        description='Dataset name for zero-shot classification (optional)',
        examples=['ImageNet_1k', 'TreeOfLife-10M'],
    )


class Services(BaseModel):
    enabled: bool = Field(..., description='Whether to load this service')
    package: str = Field(
        ...,
        description='Python package name',
        examples=['lumen_clip', 'lumen_face'],
        pattern='^[a-z][a-z0-9_]*$',
    )
    import_: Import = Field(..., alias='import')
    models: dict[str, ModelConfig] = Field(
        ..., description='Model configurations (alias â†’ config)'
    )


class LumenServicesConfiguration(BaseModel):
    """
    Unified configuration schema for all Lumen ML services
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Metadata
    deployment: Deployment | Deployment1
    server: Server
    services: dict[str, Services] = Field(..., description='Service definitions')
