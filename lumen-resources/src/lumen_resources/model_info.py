# generated by datamodel-codegen:
#   filename:  model_info-schema.json
#   timestamp: 2025-10-18T06:12:48+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from pathlib import Path
import json
from typing import TypeAlias

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Format(Enum):
    huggingface = "huggingface"
    openclip = "openclip"
    modelscope = "modelscope"
    custom = "custom"


class Source(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    format: Format
    repo_id: str = Field(
        ..., description="Repository identifier for model source", min_length=1
    )


class Requirements(BaseModel):
    python: str | None = None
    dependencies: list[str] | None = None


class Runtimes(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    available: bool
    files: list[str] | dict[str, list[str]] | None = None
    devices: list[str] | None = None
    requirements: Requirements | None = None


class Metadata(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    license: str | None = None
    author: str | None = None
    created_at: date | None = None
    updated_at: AwareDatetime | None = None
    tags: list[str] | None = None


class ModelConfigurationSchema(BaseModel):
    """
    Schema for Lumen AI model configuration files
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(
        ...,
        description="Model name identifier, this is also openclip model identifier if openclip is set as source format",
        max_length=100,
        min_length=1,
    )
    version: str = Field(
        ..., description="Model version", pattern="^[0-9]+\\.[0-9]+\\.[0-9]+$"
    )
    description: str = Field(
        ..., description="Model description and purpose", max_length=500, min_length=1
    )
    model_type: str = Field(..., description="Type of the model")
    embedding_dim: int = Field(
        ..., description="Dimension of the embedding space", ge=1, le=100000
    )
    source: Source
    runtimes: dict[str, Runtimes]
    datasets: dict[str, str] | None = None
    metadata: Metadata | None = None

    @classmethod
    def from_json_file(cls, path: str | Path):
        """
        Load a ModelConfigurationSchema from a JSON file.

        Raises:
            FileNotFoundError: if the file does not exist
            json.JSONDecodeError: if the file is not valid JSON
            pydantic.ValidationError: if validation fails
        """
        path = Path(path)
        if not path.exists():
            raise FileNotFoundError(f"File not found: {path}")
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        # Use Pydantic v2 API to validate and construct
        return cls.model_validate(data)

    def to_json_file(self, path: str | Path, *, pretty: bool = True) -> None:
        """
        Write the model to a JSON file.

        Args:
            path: destination path
            pretty: if True, write with indentation for readability
        """
        path = Path(path)
        if path.parent:
            path.parent.mkdir(parents=True, exist_ok=True)
        data = self.model_dump()
        with open(path, "w", encoding="utf-8") as f:
            if pretty:
                json.dump(data, f, indent=2, ensure_ascii=False)
            else:
                json.dump(data, f, separators=(",", ":"), ensure_ascii=False)


ModelInfo: TypeAlias = ModelConfigurationSchema
