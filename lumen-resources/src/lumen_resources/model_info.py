# generated by datamodel-codegen:
#   filename:  model_info-schema.json
#   timestamp: 2025-10-19T06:58:43+00:00

from __future__ import annotations

from datetime import date
from enum import Enum

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Format(Enum):
    huggingface = 'huggingface'
    openclip = 'openclip'
    modelscope = 'modelscope'
    custom = 'custom'


class Source(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    format: Format
    repo_id: str = Field(
        ..., description='Repository identifier for model source', min_length=1
    )


class Requirements(BaseModel):
    python: str | None = None
    dependencies: list[str] | None = None


class Runtimes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    available: bool
    files: list[str] | dict[str, list[str]] | None = None
    devices: list[str] | None = None
    requirements: Requirements | None = None


class Datasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    labels: str
    embeddings: str


class Metadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    license: str | None = None
    author: str | None = None
    created_at: date | None = None
    updated_at: AwareDatetime | None = None
    tags: list[str] | None = None


class ModelInfo(BaseModel):
    """
    Schema for Lumen AI model configuration files
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Model name identifier, this is also openclip model identifier if openclip is set as source format',
        max_length=100,
        min_length=1,
    )
    version: str = Field(
        ..., description='Model version', pattern='^[0-9]+\\.[0-9]+\\.[0-9]+$'
    )
    description: str = Field(
        ..., description='Model description and purpose', max_length=500, min_length=1
    )
    model_type: str = Field(..., description='Type of the model')
    embedding_dim: int = Field(
        ..., description='Dimension of the embedding space', ge=1, le=100000
    )
    source: Source
    runtimes: dict[str, Runtimes]
    datasets: dict[str, Datasets] | None = None
    metadata: Metadata | None = None
